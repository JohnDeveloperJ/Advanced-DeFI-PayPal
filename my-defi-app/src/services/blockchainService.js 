import { ethers } from 'ethers';
import contractABI from './contracts/AdvancedDeFiPayPal.json'; // Adjust path as needed
import contractAddress from './contractAddress'; // Adjust path as needed

// Initialize connection to Ethereum
let provider;
let contract;

export const init = async () => {
    if (typeof window.ethereum !== 'undefined') {
        try {
            await window.ethereum.request({ method: 'eth_requestAccounts' }); // Request access to wallet
            provider = new ethers.providers.Web3Provider(window.ethereum);
            contract = new ethers.Contract(contractAddress, contractABI, provider.getSigner());
        } catch (error) {
            console.error("Could not connect to wallet:", error);
        }
    } else {
        console.error("Ethereum object not found, install MetaMask.");
    }
};

export const registerUser = async () => {
    if (!contract) throw new Error("Contract not initialized");
    try {
        const transaction = await contract.register();
        await transaction.wait();
        return "Registration successful";
    } catch (error) {
        console.error("Registration failed:", error);
        throw error;
    }
};

export const deposit = async (amount) => {
    if (!contract) throw new Error("Contract not initialized");
    try {
        const transaction = await contract.deposit({ value: ethers.utils.parseEther(amount) });
        await transaction.wait();
        return "Deposit successful";
    } catch (error) {
        console.error("Deposit failed:", error);
        throw error;
    }
};

export const withdraw = async (amount) => {
    if (!contract) throw new Error("Contract not initialized");
    try {
        const transaction = await contract.withdraw(ethers.utils.parseEther(amount));
        await transaction.wait();
        return "Withdrawal successful";
    } catch (error) {
        console.error("Withdrawal failed:", error);
        throw error;
    }
};

export const getBalance = async () => {
    if (!contract) throw new Error("Contract not initialized");
    try {
        const balance = await contract.balanceOf();
        return ethers.utils.formatEther(balance);
    } catch (error) {
        console.error("Error fetching balance:", error);
        throw error;
    }
};

// Add other contract interaction functions as needed
